public class DemoRun {

	public static void main(String[] args) {

		/* Instantiate a new pseudo random generator */
		
		/* Randomness can be varied from default by using some Long seed value as
		 * a parameter for this constructor, but default of system time in suitable
		 */
		MersenneTwisterFast someRandom = new MersenneTwisterFast();

		/* Demo of random generator - distribution of the counts in the
		 * someTests array should be more or less even.
		 *
		 * Note: included for demo purpose, this code has been tested with much 
		 * larger arrays (500 vs. 5 below) to verify risk of uneven distribution
		 * is low. Generation of any values outside of expected range will
		 * cause an exception, which was not observed.
		 */
		int[] someTests = new int[1000];
		/* initialize all test values as 0 */
		for (int i=0; i<someTests.length; i++) someTests[i] = 0;

		/* Exercise random generator many times and capture distribution,
		* while timing total duration of run.
		*/
		Long timeStart = System.currentTimeMillis();
		for (int i=0; i<50000000; i++){
			int someValue = someRandom.nextInt(someTests.length);
			someTests[someValue] += 1;
		}
		Long timeEnd = System.currentTimeMillis();
		Long duration = timeEnd - timeStart;
		System.out.println("Demo of use of MersenneTwisterFast random generator");
		System.out.println(String.format("Time (ms) at beginning of run of generation 50 million values: %s", timeStart));
		System.out.println(String.format("After run: %s, duration is %s to nearest ms", timeEnd, duration));

		/* Output the results, expectation is even distribution */
		System.out.println("Demo of distribution of values generated by random generator");
		for (int i=0; i<someTests.length; i++) {
			System.out.println(String.format("someTests[%s]=%s", i, someTests[i]));
		}
		System.out.println("--------");

		/* Generate a stack of five decks of cards */
		Cards myCards = new Cards();
		String[] fiveDeckStack = new String[260];
		for (int i=0; i<fiveDeckStack.length; i++){
			fiveDeckStack[i] = myCards.deck[i%52];
		}

		/* Output the five card stack prior to shuffle */
		System.out.println("Stack of five decks of cards prior to shuffle");
		int cardCount = 1;
		for (String someCard : fiveDeckStack){
			System.out.println(String.format("card %s: %s", cardCount++, someCard));
		}
		System.out.println("--------");

		/* Shuffle the deck */
		timeStart = System.currentTimeMillis();
		System.out.println(String.format("Time (ms) at beginning of shuffle: %s", timeStart));
		Cards.shuffler2(fiveDeckStack);
		timeEnd = System.currentTimeMillis();
		duration = timeEnd - timeStart;
		System.out.println(String.format("After shuffle: %s, duration is %s to nearest ms", timeEnd, duration));

		/* Output the five card stack after shuffle */
		System.out.println("Stack of five decks of cards after shuffle");
		cardCount = 1;
		for (String someCard : fiveDeckStack){
			System.out.println(String.format("card %s: %s", cardCount++, someCard));
		}

	}
}
